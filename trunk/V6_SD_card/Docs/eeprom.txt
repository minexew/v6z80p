
EEPROM.FLX - Update OSCA etc

Use: EEPROM (no arguments)

*************************************
*                                   *
*             CAUTION!              *
*                                   *
*  Incorrect use of this app can    *
*  prevent the V6Z80P from starting *
*                                   *
*  Worse, reconfiguring the FPGA    *
*  with a third party design that   *
*  has incorrect signal assigments  *
*  contention (clashing outputs     *
*  etc) could theoretically damage  *
*  components on the PCB.           *
*                                   *
*************************************


The EEPROM tool divides the EEPROM
memory into several 128KB slots, each
of which (except slot 0) can store an
FPGA config file.

Slot 0 is reserved for OS / bootcode 
or user data. The other slots can
each take a spartan II XS2S150 FPGA
config file (or user data).


EEPROM Tool Menu Options
-------------------------

1: (Re)Program a slot.
----------------------

Simply follow the prompts to upload
a raw FPGA config .bin file (as
produced by the Xilinx Webpack 
software) or a processed .v6c file
(custom made for the V6Z80P -
essentially these are the Xilinx
config .bin files with extra data
(label, PCB version requirement)
appended.

These files can be be downloaded
with the serial link app from the PC
or loaded from disk. Flashing should
take less than 1 minute. Note: The
entire 128KB slot is erased prior
to flashing. If a .bin file used,
its filename (up to the extension) 
is tagged onto the end for later
identification. If a .v6c file is
used, it's native label data is used
for identification and additionally,
a PCB version check is performed
before flashing. 

Writing to the current power-up boot
slot is not recommended. Instead it
is safer to write to an inactive
slot - this can be tested with option
[2]  ("Reconfigure FPGA now"). If
all is OK, the change can be made
"permanent" later with Option [3]. 


2: Reconfigure the FPGA now.
----------------------------

Temporarily (until power off) changes
the slot pointer and reprograms
(restarts) the FPGA.


3: Change power-on boot slot.
-----------------------------

This is the slot from which the FPGA
configures from on power up. The
setting is held in the config PIC's
flash memory - use this option to
change it.

Remember, if the power-up Slot pointer
is changed to point to a config which
does not work or a config which
provides no means of changing the slot
back, this will be a problem. See
"Emergency recovery" instructions
at the end of this document to
resolve such issues.


4. Erase slot
-------------

Used to erase one of the 128KB
eeprom slots. This option will
give a warning if slot 0 or the
currently active slot is selected
for erasure, but will allow it.


5. Install OS to EEPROM
-----------------------

Writes a file to $00800 (to $EFFF max)
in the EEPROM.


6. Uninstall OS from EEPROM
---------------------------

Deletes the signature of an OS file
in EEPROM (writes $FF to $00800-$008FF)


7. Update the bootcode
----------------------

Writes a file to either $0F000
(primary bootcode in Block 0) or
$1F000 (backup bootcode in Block 1)
The bootcode should be 3520 bytes max.
BE VERY CAREFUL updating the bootcode!
An incorrect file will prevent FLOS
from starting up.


8. Insert arbitrary data into block
-----------------------------------

This is used to store small files in
blocks that are not being used for
FPGA config data. The new file must
fit within the 64KB block. When you
insert a file, the existing data
from the block is first read into
a buffer, the new file overwrites
the locations in the buffer that
it occupies, the block in the EEPROM
is erased and finally the entire
block rewritten. This way, seperate
files can coexist in any one block.
Programming a block should take less
than 30 seconds.


9. Save data from block
-----------------------

Reads data from the EEPROM and saves
it to disk or sends it over serial
link. This routine works with block
granularity (64KB) so the maximum
data that can be saved in one go is
64KB (IE: from the start of a block).
You will be prompted for a block
number, address within the block
where the save is to start and the
save length.




EEPROM Memory map
-----------------


        .---------------. <-$00000
      / !    BLOCK 0    !
SLOT 0  !---------------! <-$10000
      \ !    BLOCK 1    !
        !---------------! <-$20000
      / !    BLOCK 2    !
SLOT 1  !---------------! <-$30000
      \ !    BLOCK 3    !
        !---------------! <-$40000
      / !    BLOCK 4    !
SLOT 2  !---------------! <-$50000
      \ !    BLOCK 5    !
        !---------------! <-$60000
      / !    BLOCK 6    !
SLOT 3  !---------------! <-$70000
      \ !    BLOCK 7    !
        !---------------!
        ! etc etc etc   !


SLOT 0 (blocks 0+1) cannot contain
an FPGA config file. Instead it is
utilized as follows:


Blk 0: $00000 : free for use by user
     : $00800 : OS can be stored here
     : $0F000 : Primary bootcode

Blk 1: $10000 : free for use by user
     : $1F000 : Backup bootcode

All other /slots can contain FPGA
config files



===================================
        Emergency Recovery: 
===================================

If the Active Slot points to an
invalid / undesired config.


*** For the original V6Z80P Board ***
-------------------------------------

OPTION 1: With Config PIC firmware
v616+ the Active Slot can be changed
manually. Assuming there is a working
config in Slot 1, 2 or 3 and the problem
is just that the Active Slot selection
is pointing at a bad config:

* Power off.

* Install jumper J2 only

* Power on (yellow led flashes rapidly
  - JTAG mode).

* Remove jumper J2 again

* The PIC will reset the active slot
  to 1 (indicated by 1 pulse of the
  red LED) The yellow led lights up
  for 4 seconds then Slot 2 is set (2
  flashes of red LED), again there's a
  4 second pause, finally slot 3 is
  set (3 flashes).

* Power off only when the yellow LED
  is lit following the desired slot
  setting.

* When you power on the active slot
  will correctly point to slot 1, 2 or 3.

OPTION 2: Remove and reprogram the
EEPROM or config PIC externally.
(Note: It is the PIC chip that
actually holds the slot selection - 
you will only need to reprogram the
PIC if you have old firmware that
doesn't support the manual slot
selection. If you do reprogram the
PIC, use the latest firmware .hex
file so that you wont have to do
so again.) If you reprogram the
EEPROM, use "default.bin" from the
folder development_files/eeprom
image as this also contains the
bootcode for SLOT 0.

OPTION 3: JTAG config. If none of
the first 3 slots contain OSCA:

* Power off and connect a Xilinx JTAG
  cable to the V6Z80P.

* Install jumpers J1 and J2.

* Load the most recent OSCA project
  into Xilinx webpack ISE and send
  the OSCA config .bit file from the
  PC to the V6Z80P via JTAG.

* If the bootcode is intact in the
  EEPROM, the system will start as
  normal allowing you to load
  EEPROM.EXE via FLOS. If the
  bootcode checksum fails the
  screen will flash magenta, then
  grey. See "bootcode problems" below.

* Remove jumpers J1 and J2 next time
  you power off so that the system
  automatically configures from the
  EEPROM.



Recovery Instructions for the V6Z80P+
-------------------------------------

OPTION 1: Assuming there is a working
config in Slot 1 - 7 and the problem
is just that the Active Slot selection
is pointing at a bad config:


* Power off.

* Install jumper J2 only (or hold
  button if connected to J2)

* Power on (LED flashes rapidly).

* Remove jumper J2 again (or release
  J2 button)

* If the LED continues to flash rapidly
  install and remove the jumper (or
  press and release J2 button)
  
* The LED will flash once, pause
  about 5 seconds, then flash twice,
  pause 5 seconds, then flash three
  times and so on - the number of flashes
  represents the slot selection. During
  the pause following the slot selection
  you require, replace the jumper (or
  press J2 button) the LED will then stay
  on permanently signifying that the slot
  has been set.

* Power off and remove Jumper J2 (release
  J2 button).



OPTION 2: JTAG configuration. (If none
of the first seven slots contain OSCA)

* Power off and connect a Xilinx JTAG
  cable to the V6Z80P.

* Install jumpers J1 and J2.

* Load the most recent OSCA project
  into Xilinx webpack ISE and send the
  OSCA config .bit file from the PC to
  the V6Z80P via JTAG.

* If the bootcode is intact in the
  EEPROM, the system will start as
  normal allowing you to load
  EEPROM.EXE via FLOS. If the bootcode
  checksum fails the screen will flash
  magenta, then grey. See "bootcode 
  problems" below.

* Remove jumpers J1 and J2 next time
  you power off so that the system
  automatically configures from the
  EEPROM.



======================================
          Bootcode Problems:
======================================

If the OSCA ROM cannot load a valid
bootcode file from the EEPROM, the
display will flash magenta (bad CRC)
or green (time out). If OSCA version
661 or above is installed it is
possible to send the bootcode file
manually via the serial link when
the display turns grey.

It is possible to force serial transfer
of the bootcode on power up by holding
UP+RIGHT+FIRE on a joystick in port A.
(Note: The transfer must be at 115200
BAUD). (Again, OSCA 661 or above must
be installed).

======================================

