#include "GameObj.clc"
#include "Sprite.clc"


#include <SDL2/SDL.h>

#include <SDL2/SDL_mixer.h>
#include <SDL2/SDL_image.h>
#include <debug_print.h>

//
PlatformGfx
{    

    SDL_Rect nativeSize;
    SDL_Rect newWindowSize;

    SDL_Renderer*   ren;
    SDL_Window *    win;    
    SDL_Texture *   backBuffer;

    int             numFrames;
    Uint32          startTime;
    
    
    void Init()
    {
        ren = NULL; win = NULL; backBuffer = NULL;
        numFrames = 0;

        nativeSize.x = 0;
        nativeSize.y = 0;
        nativeSize.w = 320;
        nativeSize.h = 240;

        newWindowSize.x = 0;
        newWindowSize.y = 0;
        newWindowSize.w = nativeSize.w * 2;
        newWindowSize.h = nativeSize.h * 2;

    }

    // SDL2 scale backbuffer
    // http://www.gamedev.net/page/resources/_/technical/apis-and-tools/stretching-your-game-to-fit-the-screen-without-letterboxing-sdl2-r3547
    void InitVideoMode()
    {
        DEBUG_PRINT( "InitVideoMode()) in PlatformGfx\n" );        
        startTime = SDL_GetTicks();

        SDL_DisplayMode displayMode;

        if (SDL_Init(SDL_INIT_EVERYTHING) != 0) {
            DEBUG_PRINT( "SDL_Init Error: \n");
            DEBUG_PRINT( "%s ", SDL_GetError()  );            
            exit(1);
        }


        //Set the scaling quality to nearest-pixel (this is for scaling backbuffer)
        if(SDL_SetHint(SDL_HINT_RENDER_SCALE_QUALITY, "0") < 0)
        {            
            DEBUG_PRINT( "Failed to set Render Scale Quality. \n" );            
            exit(1);
        }

        // get monitor params
        int request = SDL_GetDesktopDisplayMode(0, &displayMode);   // displayMode.w, displayMode.h

        // create window
        win = SDL_CreateWindow("CLCTRY - SDL window", 0, 0, newWindowSize.w, newWindowSize.h, SDL_WINDOW_SHOWN /*| SDL_WINDOW_FULLSCREEN*/);
        if (win == NULL) {
            DEBUG_PRINT( "SDL_CreateWindow Error: %s \n", SDL_GetError() );            
            exit(1);
        }
  
        // create renderer
        // You must use the SDL_RENDERER_TARGETTEXTURE flag in order to target the backbuffer (this is for scaling backbuffer)
        ren = SDL_CreateRenderer(win, -1, SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC | SDL_RENDERER_TARGETTEXTURE);
        if (ren == NULL){            
            DEBUG_PRINT( "SDL_CreateRenderer Error: %s \n", SDL_GetError() );             
            exit(1);
        }

        //Set to blue so it's noticeable if it doesn't do right.
        // SDL_SetRenderDrawColor(ren, 0, 0, 200, 255);


        //Similarly, you must use SDL_TEXTUREACCESS_TARGET when you create the texture
        backBuffer = SDL_CreateTexture(ren,
                                   SDL_GetWindowPixelFormat(win),
                                   SDL_TEXTUREACCESS_TARGET,
                                   nativeSize.w,
                                   nativeSize.h);



        //IMPORTANT Set the back buffer as the target
        SDL_SetRenderTarget(ren, backBuffer);

    }

    void OnGameLoopBegin()    
    {
        //First clear the renderer
        // SDL_RenderClear(ren);
    
    }


    void OnGameLoopEnd()    
    {

       SDL_SetRenderTarget(ren, NULL); //Set the target back to the window

    
        // if(resize) //If a resize is neccessary, do so.
        // {
        //     Resize();
        //     resize = false;
        // }

        SDL_RenderCopy(ren, backBuffer, &nativeSize, &newWindowSize); //Render the backBuffer onto the
                                                                           //screen at (0,0)    
        
        // clear color
        SDL_SetRenderDrawColor( ren, 0, 0, 0, 255 );

        SDL_RenderPresent(ren);
        SDL_RenderClear(ren); //Clear the window buffer

        SDL_SetRenderTarget(ren, backBuffer); //Set the target back to the back buffer
        SDL_RenderClear(ren); //Clear the back buffer

        CalcFPS();
    }

    void CalcFPS()
    {
        ++numFrames;
        Uint32 elapsedMS = SDL_GetTicks() - startTime; // Time since start of loop
        if (elapsedMS) { // Skip this the first frame
            double elapsedSeconds = elapsedMS / 1000.0; // Convert to seconds
            double fps = numFrames / elapsedSeconds; // FPS is Frames / Seconds
            // DEBUG_PRINT("FPS: %u \n", (unsigned int) fps);
        }
    }

    void DrawObj(GameObj* obj)    
    {

        SDL_Rect r;
         

        int x = FIXED_TO_INT(obj.x) - SCR_START_X;
        int y = FIXED_TO_INT(obj.y) - SCR_START_Y;
            
        // int w = obj.width;
        // int h = obj.height;

        //int color = 16;
        //FillRect(x, y, w, h, color);
        
        // dest rect
        r.x = x;
        r.y = y;
        r.w = obj:GetWidth();;
        r.h = obj:GetHeight();
        
        // if(obj.sprite.rcSource.w == 0 && obj.sprite.rcSource.h == 0) {
        //     rc.w = obj.width;
        //     rc.h = obj.height;
        // }
        // else {
        //     rc.w = obj.sprite.rcSource.w;
        //     rc.h = obj.sprite.rcSource.h;
        // }
        // DrawRect(rc,   255,255,255);

        // Set render color
        SDL_SetRenderDrawColor( ren, 255, 255, 255, 255 );

        // // Render rect
        SDL_RenderFillRect( ren, &r );


        // if collide vars are set, draw collide rect
        if(obj->col_x_offset != 0 && obj->col_y_offset != 0   &&   obj->col_width != 0 && obj->col_height != 0){
            SDL_Rect coll;

            coll.x = x + obj->col_x_offset;
            coll.y = y + obj->col_y_offset;

            coll.w = obj->col_width;
            coll.h = obj->col_height;

             // Set render color
            SDL_SetRenderDrawColor( ren, 0, 255, 255, 255 );

            // Render rect
            SDL_RenderFillRect( ren, &coll );

        }




        // // Render sprite surf
        // SDL_RenderCopy( ren, obj->sprite->spriteTexture, &obj->sprite->rcSource, &r );
    
    }


    void Cleanup() 
    {
        SDL_DestroyTexture(backBuffer);


        SDL_DestroyRenderer(ren);
        SDL_DestroyWindow(win);
        SDL_Quit(); 
        
    }

}