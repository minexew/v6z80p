// Platform specific code.
// Host: V6Z80P
// Lang: C
// Lib:  


// Some methods are static, others are  non static.
public class PlatformGfx
{
    byte freeHardwareSpriteNumber;
    
    public const byte InvalidSpriteNumber = 255;
    
    PlatformGfx()
    {
        freeHardwareSpriteNumber = 0;
    }
    

    public void OnGameLoopBegin()
    { 
        native {
            FLOS_WaitVRT();            
            SpritesRegsBuffer_CopyToHardwareRegs();         // must be called right after FLOS_WaitVRT()
            SpritesRegsBuffer_Clear();                      // clear sprite regs shadow buffer
            // now you can do main game code                        
        }
        
        
        //int color; native { color = RGB2WORD(255,128,255); }
        SetBorder(0xff);
        
        freeHardwareSpriteNumber = 0;
    } 

    public void OnGameLoopEnd()
    { 
        native {
            ;
        }
        

        SetBorder(0);
    }
        
    public static void InitVideo(int screen_w, int screen_h)
    {   
        native {           
            VideoMode_InitTilemapMode(WIDE_LEFT_BORDER /*|DUAL_PLAY_FIELD*/, EXTENDED_TILE_MAP_MODE);
            VideoMode_SetupDisplayWindowSize(X_WINDOW_START, X_WINDOW_STOP, Y_WINDOW_START, Y_WINDOW_STOP);
            
            
            // Enable sprites
            mm__vreg_sprctrl = SPRITE_ENABLE;

            // Set display window params to sprite functions.
            // +1 point to x for wideleft border (one X  window point = 16 pixels)
            SpritesRegsBuffer_SetDisplayWindowParams(X_WINDOW_START + 1, Y_WINDOW_START);
        }
        
        // 
        PlatformGfx.PutObjectsToSpriteMemory();
        PlatformGfx.SetPalette();
    }
    
   public static void CleanupVideo()
    { 
        native {
            ;
        }
    } 
    
    public static void Pause()
    {
        native {
            ;
        }
    }  

    public void Draw(GameObj obj)
    {
        int x = obj.x;
        int y = obj.y;
        
        int w = 32;
        int h = 32;

    }     
    
    
    
    // --------------------------------------
    public static void FillRect(int x, int y, int w, int h, int color)
    {
        native {
            ;
        }
   
    }
    
    public static void ClearSpriteRegs()
    {   
        native {

        }
    }
    
    public static void PutObjectsToSpriteMemory()    
    {   

         native {
            unsigned char Img1[16 * 16];            //  sprite image buffer
            unsigned char color = 100;
            // first "corner" debug spr
            memset(Img1,0,sizeof(Img1));
            Img1[0 * 16] = color;            Img1[0] = color;
            Img1[1 * 16] = color;            Img1[1] = color;
            Img1[2 * 16] = color;            Img1[2] = color;
            Img1[3 * 16] = color;            Img1[3] = color;            
            Img1[4 * 16] = color;            Img1[4] = color;
            Img1[5 * 16] = color;            Img1[5] = color;
            Img1[6 * 16] = color;            Img1[6] = color;
            Img1[7 * 16] = color;            Img1[7] = color;            
  
            
                        
            // copy data to sprite memory at 0
            PAGE_IN_SPRITE_RAM();
            SET_SPRITE_PAGE(0);
            memset((byte*)SPRITE_BASE,0,0x1000);                               //  clear 4kb sprite ram
            memcpy((byte*)SPRITE_BASE, (byte*)Img1, sizeof(Img1));
            PAGE_OUT_SPRITE_RAM();
        }
    }
    
    
    public static void SetPalette()
    {
        native {
            word* Palette = (word*)PALETTE;
            Palette[0] = RGB2WORD(0,0,0);
            Palette[100] = RGB2WORD(255,128,255);
            //Palette[200] = RGB2WORD(255,255,255);
        }
    }

    public static void SetBorder(int color)
    {
        native {
            word* Palette = (word*)PALETTE;
            Palette[0] = color;
        }
    }
        
    // non - static funcs -----------------------------------------------
    public byte GetFreeHardwareSpriteNumber()
    {
        byte r;
        if(freeHardwareSpriteNumber > 120)
            return InvalidSpriteNumber; // no hw spr number avail
        
        r = freeHardwareSpriteNumber;
        freeHardwareSpriteNumber++;
            
        return r;
    }
    

}

    
    


public class PlatformInput
{
    // --------------------- Input -----------------------

    int foo;
    
    // Return: false - need to exit to OS
    //         true - all ok
    public bool HandleInput()
    {
        int isExit = 0;
        native {
            ;
        }
        
        return  true;
    }

    public bool IsKeyPressed(int keySym)
    {
        return false;
    }
}


public class Sprite
{
    int foo;
    

    Sprite()
    {
        Debug.Print("Sprite()\n");  

    }    


    public void LoadFromImageFile(string filename)
    {
        native {
            filename;
        }

    }

    public void SetSrcImageRect(int x, int y, int w, int h)
    {
        
        native {
            x; y; w; h;
        }

    }

    public void DrawGameObj(GameObj game_obj)
    {
        int x = game_obj.x; 
        int y = game_obj.y;

        native {
            sprite_regs_t r;
        }
        byte sprNumber = game_obj.engine.myPlatformGfx.GetFreeHardwareSpriteNumber();
        if(sprNumber == PlatformGfx.InvalidSpriteNumber) {
            Debug.Print("Sprite.DrawGameObj() FAILED, no HW spr number avail. Got InvalidSpriteNumber. \n");
            return;
        }
        
        //int color = 16;
        //FillRect(x, y, w, h, color);
        
        native {
            //DEBUG_PRINT("HW spr number = %u \n", sprNumber);
            r.sprite_number            = sprNumber;
            r.x                        = x;
            r.y                        = y;
            r.height                   = 1;                       // 16 pixels tall       (height in 16pixels chunks)
            r.sprite_definition_number = 0;
            r.x_flip                   = FALSE;
            SpritesRegsBuffer_SetSpriteRegs(&r);
        }



    }

}