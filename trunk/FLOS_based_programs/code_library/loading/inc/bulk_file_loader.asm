;-----------------------------------------------------------------------------------------------
;Bulk file loader. Allows directory of files to be replaced with a single consolidated file
;with index (optionally attached to the executable) - (Bulkfile generated by BULKFILE.EXE)
;V1.00
;-----------------------------------------------------------------------------------------------
;
;Format of bulk file:
;--------------------

;Index:
;------
;$00 1st entry $FF, 12 * 0, total length_of_index ((entries * 16) + 1) 
;$10 2nd entry: Filename.bin, 0, length_of_file (filename always padded to 12 chars, l-o-f is 24 bit)
;$20 3rd entry: Filename.bin, 0, length_of_file (filename always padded to 12 chars, l-o-f is 24 bit)
;.. for n entries..
;$00 - end of index
;
;Files
;-----
;File1
;File2
;File3
; 
;-----------------------------------------------------------------------------------------------
;
; Set the following EQUATES in main code:
;
;"index_start_lo" (0 if bulk file is seperate to main .exe)
;"index_start_hi" (""                                   "")
;"bulkfile_fn"    (if bulk file is attached to main .exe, make this be same filename and use
;                  a FLOS program header to truncate the program load to stop at the bulk file part)
;
;-----------------------------------------------------------------------------------------------

load_from_bulk_file


;Set HL = filename
;    DE = load address
;     B = load bank


	ld (fn_addr),hl
	ld a,b
	ld (load_bank),a
	ld (load_addr),de
	
	ld hl,0
	ld (bulk_offset),hl
	ld (bulk_offset+2),hl
	
	ld hl,bulkfile_fn
	call kjt_open_file
	ret nz
	
	ld iy,index_start_lo
	ld ix,index_start_hi
	call kjt_set_file_pointer
	
find_fn	ld iy,16			;length of each entry in index
	ld ix,0
	call kjt_set_load_length
		
	ld hl,index_buffer
	ld b,0
	call kjt_read_from_file
	ret nz	
	
	ld hl,index_buffer
	ld a,(hl)			;1st char of entry = $00?
	or a
	jr nz,not_fnf
	ld a,$02			;if so, file not found error
	or a
	ret
	
not_fnf	ld de,(fn_addr)			;compare entry filename with desired filename
	ld b,13
	call kjt_compare_strings
	jr c,found_file
	
	ld hl,(bulk_offset)		;not a filename match, so add the length of this
	ld de,(index_buffer+13)		;file to the offset total
	add hl,de
	ld (bulk_offset),hl
	ld hl,(bulk_offset+2)
	ld a,(index_buffer+15)
	ld e,a
	ld d,0
	adc hl,de
	ld (bulk_offset+2),hl
	jr find_fn			;and load next index entry
	

found_file
		
	ld hl,bulkfile_fn		;the filename matched, so we need to load the data from
	call kjt_open_file		;the computed offset (get length from this entry)
	ret nz
	
	ld hl,(bulk_offset)
	ld de,index_start_lo
	add hl,de
	push hl
	pop iy
	ld hl,(bulk_offset+2)
	ld de,index_start_hi
	adc hl,de
	push hl
	pop ix	
	call kjt_set_file_pointer
	
	ld iy,(index_buffer+13)
	ld a,(index_buffer+15)
	ld l,a
	ld h,0
	push hl
	pop ix
	call kjt_set_load_length
	
	ld hl,(load_addr)
	ld a,(load_bank)
	ld b,a
	call kjt_read_from_file
	ret

		
;--------------------------------------------------------------------------------------------------

fn_addr		dw 0
load_addr	dw 0
load_bank	db 0

bulk_offset	dw 0,0
index_buffer	ds 16,0


;--------------------------------------------------------------------------------------------------
