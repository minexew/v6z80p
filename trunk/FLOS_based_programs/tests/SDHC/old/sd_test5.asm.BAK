; SDHC test 5, init, save, read verify first 4096 sectors

;---Standard header for OSCA and FLOS ----------------------------------------

include "kernal_jump_table.asm"
include "osca_hardware_equates.asm"
include "system_equates.asm"

	org $5000
	
;-----------------------------------------------------------------------------


sd_sector_buffer equ $7000


	call sd_initialize
	jr z,good
	
bad	ld hl,bad_txt
	call kjt_hex_byte_to_ascii
	ld hl,nl_txt
	call kjt_print_string
	xor a
	ret
	
	
good	push hl
	ld hl,cap_txt
	ld a,c
	call kjt_hex_byte_to_ascii
	push de
	ld a,d
	call kjt_hex_byte_to_ascii
	pop de
	ld a,e
	call kjt_hex_byte_to_ascii
	
	ld hl,ok_txt
	call kjt_print_string
	pop hl
	call kjt_print_string

;-----------------------------------------------------------------------------

	jp skip_save

	ld hl,save_txt
	call kjt_print_string
	ld hl,0
	ld (sector_lba),hl
	ld (sector_lba+2),hl

	ld bc,$1000

mslp2	push bc
	call show_sector
	
	ld b,128			; build sector as: DWORD count, LBA0,LBA1,LBA2
	ld hl,sd_sector_buffer
	ld c,0
mslp1	ld (hl),c
	inc hl
	ld a,(sector_lba)
	ld (hl),a
	inc hl
	ld a,(sector_lba+1)
	ld (hl),a
	inc hl
	ld a,(sector_lba+2)
	ld (hl),a
	inc hl
	inc c
	djnz mslp1
	
	call sd_write_sector
	pop bc
	jr nz,bad
	
	call next_sector_lba
	
	dec bc
	ld a,b
	or c
	jr nz,mslp2
	

skip_save
	
;-----------------------------------------------------------------------------
	
	ld hl,load_txt
	call kjt_print_string
	ld hl,0
	ld (sector_lba),hl
	ld (sector_lba+2),hl
	

	ld bc,$1000
rslp1	call show_sector
	push bc
	call sd_read_sector
	pop bc
	jp nz,bad
	
	call verify
	jr nz,quit
	
	call next_sector_lba
	dec bc
	ld a,b
	or c
	jr nz,rslp1
	
	ld hl,done_txt
	call kjt_print_string
	
quit	xor a
	ret

;-----------------------------------------------------------------------------

	
next_sector_lba

	push bc
	ld hl,(sector_lba)
	ld de,(sector_lba+2)
	ld bc,1
	add hl,bc
	jr nc,secmswnc
	inc de
secmswnc	ld (sector_lba),hl
	ld (sector_lba+2),de
	pop bc
	ret
	

show_sector

	push bc
	ld hl,sec2_txt
	ld a,(sector_lba+3)
	call kjt_hex_byte_to_ascii
	ld a,(sector_lba+2)
	call kjt_hex_byte_to_ascii
	ld a,(sector_lba+1)
	call kjt_hex_byte_to_ascii
	ld a,(sector_lba)
	call kjt_hex_byte_to_ascii
	ld hl,sec1_txt
	call kjt_print_string
	pop bc
	ret
	

verify	push bc
	ld hl,sd_sector_buffer		;checks for data in: DWORD count, LBA0,LBA1,LBA2 format
	ld b,128
	ld c,0
vlp1	ld a,c
	cp (hl)
	inc hl
	jr nz,verror
	
	ld a,(sector_lba)
	cp (hl)
	inc hl
	jr nz,verror
	
	ld a,(sector_lba+1)
	cp (hl)
	inc hl
	jr nz,verror
	
	ld a,(sector_lba+2)
	cp (hl)
	inc hl
	jr nz,verror
	
	inc c
	djnz vlp1
	pop bc
	xor a
	ret
	
verror	ld hl,verror_txt
	call kjt_print_string
	pop bc
	xor a
	inc a
	ret
		
	

		
	
ok_txt	db 11,11,"Init OK. Capacity $"
cap_txt	db "xxyyzz",11,"ID String:",11,0

nl_txt	db 11,11
bad_txt	db "00 <- Error",11,0

sec1_txt	db "Sector: $"
sec2_txt	db "xxyyzzaa",13,0


save_txt	db 11,11,"Saving...",11,11,0

load_txt	db 11,11,"Loading and verifying..",11,11,0

verror_txt	db 11,11,"Verify error!",11,11,0

done_txt	db 11,11,"All done..",11,11,0

;-----------------------------------------------------------------------------

include	"sdcard_driver_v110.asm"

;-----------------------------------------------------------------------------


