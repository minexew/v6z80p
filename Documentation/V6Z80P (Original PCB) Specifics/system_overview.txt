
The V6Z80P system as supplied comprises of 3 main elements:

1. The PCB itself, this is the actual "V6Z80P".
2. The default hardware design for the FPGA called "OSCA" (Old School Computer Architecture)
3. A simple command line operating system called "FLOS" (Freezer-Like Operating System)


V6Z80P Brief circuit description
--------------------------------

The entire V6Z80P system runs from a 16MHz (3.3v) TTL clock source. This feeds the
FPGA, the Z80 (via a 74HCT08 AND gate acting as a voltage shifter because of the
V_level requirements of its clock input) and the config PIC.

Memory busses:

1. "Video memory" - 512KB 10ns, direct connection. Chip always selected.

2. "Sprite memory" - 128KB 10/12ns, direct connection. Chip always selected.

3. "System memory" - 512KB 25ns, direct connection with D0-D7, A0:A14, /RD and /WR
    routed to the relevent Z80 pins. System RAM A18:A15 are conneced only to the FPGA,
    Z80 A15 also has its own seperate FPGA connection - this allows the upper 32KB
    of Z80 address space to be paged. System RAM chip select is also connected to
    the FPGA.
    

CPU connections:

All Z80 control pins (except from RFSH and HALT which arent used) are connected
to FPGA pins.

Peripherals

Audio: Two outputs from the FPGA (Sigma/Delta pulse trains) drive a simple
resistor/capacitor filter. The output of which has its amplitude halved by
a potential divider (2 x 10K), passed via 1uf capacitor to the left and
right of the audio socket. 

Serial Port: To connect to a standard RS232 serial port - RX and TX only
are implemented. The lines are routed via a ST232 level coverter chip
to and from the FPGA.

Video Port: 12 FPGA ouputs drive 3 x 4 resitor DACs, this allows a palette
of 4096 colours. The RGB levels are <0.7v suitable for TV for VGA monitor.
2 additional FPGA outputs drive Horizontal and Vertical sync. The vertical
sync is available as direct TTL level (for VGA) and via a 750 Ohm resistor
for TV levels. Horizontal sync is only used for VGA and is therefore TTL.
A "select" output (5volts via a 100 Ohm resistor) is available to engage RGB 
mode on TVs - this is hardwired and does not use an FPGA pin)

PS2 ports: Keyboard and mouse. CLOCK and DATA directly connected to FPGA.
These lines can also be pulled down (for output) on the VxZ80P side by transistors
connected to the FPGA. (8 FPGA pins used in total).

Joysticks: Two ATARI 2600 style connectors: 6 inputs each. Lines pulled up by resistors
and pulled down by the switches in the joystick. The 12 lines are connected to a PIC
16F62x microcontroller which acts as a parallel-to-serial converter. Two FPGA pins
for Clock and Data are used to read the joystick data.

MMC/SD memory card: Uses 5 FPGA pins to connect to Power, /Card Select, Data_in,
Data_out and Clock. /Card select is also connected to an LED via resistor for
access indication. The FPGA /Power line switches a PNP transistor to apply power
to the card.


Other pins connected to the FPGA:

There are 6 pins available to use for external connections via a pin header
near the video socket. (In the default V6Z80P FPGA architecture, 3 of these pins
are used for video type select, reset and NMI inputs, the other 3 are free I/O ports.)

The configuration system uses several FPGA pins to upload config and communicate
with the PIC controller dedicated to this task (includes reprogramming the EEPROM
etc)

JTAG port: Used for "live" config of the FPGA, standard Xilinx pin out sequence.

Config selection jumper: Selects between JTAG mode and normal EEPROM config
(slave serial mode)



Brief description of the features of "OSCA"
-------------------------------------------

OSCA is the default hardware configuration supplied with the FPGA, but it is by no
means fixed. Using the Xilinx Webpack software, the FPGA can be reconfigured to provide
different features, or a totally new design EG: to emulate another system. The limitations
are the components and connections provided on the PCB (such as the Z80 CPU, memory,
oscillator and IO.)


Video:

There are 3 Screen modes: Bitplane, bytemap, tilemap - each allows hardware
scrolling with a 256 colour palette. Other features: Linedraw hardware, Blitter
datacopy, PAL, NTSC and VGA output modes.

The 512KB of read/writable video RAM is normally seen by the CPU in pages of 8KB at $2000.
There is an additional "all writes go to VRAM" mode which allows the entire 64KB of
Z80 address space to be mapped into video RAM space. The blitter unit (which
operates only within VRAM but concurrently with CPU) can see all 512KB. The Video
system has priority over the CPU (and blitter) for access to VRAM so they will
wait whilst pixel data is being fetched. The wait time varies with the display mode.

The hardware allows 55 hardware sprites per scanline (16 pixels wide, 256 colours).
The 128KB of *write only* RAM is seen by the CPU in pages of 4KB, paged in at $1000.


Z80 memory:

The 512KB of system RAM is paged in the upper 32KB of Z80 address space: $0000-$7fff
always points to system RAM $0000-$7FFF, whilst Z80 $8000-$FFFF is a 32KB page from
the pool of remaining available system RAM. These pages are referred to as "banks"
(there's 15 banks, switched by bits in one of the IO ports.)


Sound:

There are four 8bit audio channels (similar to the Amiga). Banks 4-7 hold the sample
data for the sound system which sees this area as a continuous 128KB address space
accessed via DMA.




Brief description of the "FLOS" Operating System
-------------------------------------------------

FLOS is a simple command line operating system / memory monitor similar to that
used by freezer cartridges in the 8-bit days. In some ways it behaves like a
more modern DOS in that disk-based programs can be executed simply by entering
their filenames. The usual commands are present (show memory as hex, disassemble,
load and save bytes to RAM etc) - a full list with parameter requirements is
available by entering "?" 

FLOS can use FAT16 or its own file system (called PQFS) which at can access 1GB
of storage space. The OS is located between $1000 and $4FFF and is loaded by
the ROM/Bootloader from MMC/SD card (SDHC cards are currently not supported),
onboard EEPROM or via serial download upon power up.

FLOS can be replaced with any arbitarty code that is required to load at boot up.
