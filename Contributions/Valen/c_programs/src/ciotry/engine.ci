$include("fixed.inc")

//// Engine
public class Engine
{
    GameObj[20] obj;
    // GameObj()[10] obj2;     // <== dont do like this line, it wii not work normal and sdcc will not compile
    
    
    PlatformGfx()       myPlatformGfx;
    PlatformInput()     myPlatformInput;

    
    bool isExitRequested;
    
    public const int screen_width  = 320;
    public const int screen_height = 240;
    
    /// Constructor
    Engine()
    {
        Debug.Print("Engine()\n");    
                
        isExitRequested = false;
        // allocate space, init game objects and set objects to 'unused' state
        for(int i = 0; i < obj.Length; i++) {
            obj[i] = new GameObj();
            obj[i].Unused();
        }
            
    
        

        // re-init obj and add  behavior
        obj[0].Constructor();
        obj[0].Init(this);
        obj[0].sprite.LoadFromImageFile("free_sprites.bmp");     // /home/valen/sharedFolder1/v6z80p-code/trunk/Contributions/Valen/c_programs/src/ciotry/data/
        obj[0].sprite.SetSrcImageRect(0,0, 39,32);
        MovingBehavior moving_behavior = new MovingBehavior();
        moving_behavior.xvel = $FLOAT_TO_FIXED(1);        
        obj[0].AddBehavior(moving_behavior);

        // re-init obj and add  behavior
        obj[1].Constructor();
        obj[1].Init(this);
        obj[1].sprite.LoadFromImageFile("free_sprites.bmp");
        obj[1].sprite.SetSrcImageRect(0,0, 39,32);
        KeysControlledBehavior behavior = new KeysControlledBehavior();        
        obj[1].AddBehavior(behavior);


        for(int i = 2; i < obj.Length - 1; i++) {
            // re-init obj and add  behavior
            obj[i].Constructor();
            obj[i].Init(this);
            BouncedBehavior bounced_behavior = new BouncedBehavior();
            bounced_behavior.xvel = $FLOAT_TO_FIXED(1);
            // bounced_behavior.yvel = $FLOAT_TO_FIXED(0.5);
            bounced_behavior.x1_bounce = 0;
            bounced_behavior.x2_bounce = 260;
            obj[i].AddBehavior(bounced_behavior);

            obj[i].x = (i * 10)      << $FIXED_BITS; 
            obj[i].y = (0 + i * 10)  << $FIXED_BITS; 
        }
                        

        
        obj[0].x = 0    << $FIXED_BITS;  
        obj[0].y = 0    << $FIXED_BITS;         
        obj[1].x = 0    << $FIXED_BITS;
        obj[1].y = 40   << $FIXED_BITS;         
        
        
    }

    public void ProcessInput()
    {
        // Debug.Print(myPlatformInput.sym[0]);

        // native {   
        //     if(self->myPlatformInput.sym[0] || self->myPlatformInput.sym[1]) {
        //         DEBUG_PRINT("sdl key = %i, %i \n",  self->myPlatformInput.sym[0], 
        //                                             self->myPlatformInput.is_pressed[0]
        //                                              );    
        //     }
        // } 

        // for(int i = 0; i < myPlatformInput.is_pressed.Length; i++)
        //     if(myPlatformInput.is_pressed[i] != 0) {
        //         native {   
        //             DEBUG_PRINT("pressed = %i \n ", self->myPlatformInput.is_pressed[i]);                 
        //         }
        //     }
        // Debug.Print("\n");    

    }

    public void Run()
    {
        Debug.Print("Engine.Run()\n");

        while(!isExitRequested)
        {

            
            myPlatformGfx.OnGameLoopBegin();
                        
            if(!myPlatformInput.HandleInput())
                isExitRequested = true;
            
            ProcessInput();

            // move and draw phase
            for(byte i = 0; i < obj.Length; i++)
                if(obj[i].isUsed) {
                    obj[i].DoAllBehaviors();    // do all behaviors
                    obj[i].Move();

                    obj[i].Draw();
                }
                    
                                        
            myPlatformGfx.OnGameLoopEnd();
            
            
            //native {   
            //    DEBUG_PRINT("obj x = %i, y = %i \n",  self->obj[0]->x, self->obj[0]->y);    
            //} 
            
            // do only one pass of loop (for debug reason)
            //isExitRequested = true;
            
        }

    }

    GameObj AllocateGameObj()
    {
        for(byte i = 0; i < obj.Length; i++)
            if(!obj[i].isUsed) {
                obj[i].isUsed = true;
                return obj[i];
            }

        return null;
    }
    

    


  
       
}


public class Startup
{
    Engine engine;
    
    Startup()
    {
        Debug.Print("Startup()\n");  
    }
    
    public void Run()
    {
        Debug.Print("Startup.Run()\n");    
    
        
        PlatformGfx.InitVideo(engine.screen_width, engine.screen_height);        
        engine = new Engine();
        
        engine.Run();
        PlatformGfx.CleanupVideo();

    }
    
}
