# Project targets: v6z80p, pc

import getpass
import platform
from  project_helper import Project_Helper


Return('')




# Build this project only  on valen's Linux machine (home computer).
# (because this proj is not finished!)
do_build = False
if platform.system() == 'Linux':
    if getpass.getuser() == 'valen':
        do_build = True

if do_build == False:
    Return('') # RETURT AND NOT BUILD ! 


# this proj, will build only for sdcc and pc
if Project_Helper.Is_Target_V6Z80P() == False and Project_Helper.Is_Target_PC() == False:
    Return('')

# -------------------------------------------
import re
import os
from  project_helper import Project_Helper


# Replace in C file:
# replace malloc(sizeof(GameObj)) to 
def ReplaceMallocFunc_In_C_File(target, source, env):
    src = source[0].abspath
    trg = target[0].abspath    
    #print "src=" +src
    #print "trg=" +trg
    
    with open (src, "r") as fileGameC:
        strFile = fileGameC.read()    
    #strFile = re.sub(r'malloc\(sizeof\((.*)\)\)',
    #        r'pool_malloc(sizeof(\1), "\1")', strFile)

    with open(trg, "w") as text_file:
        text_file.write(strFile)
    #print strFile
    return None
    
    
    
    
if Project_Helper.Is_Target_PC():
    Import('current_project')
    current_proj = current_project
    env = current_project.env
    
    platformSourceFile = ['platform/platform.ci']
    proj_libs = ['SDL', 'SDL_gfx']

    basedir          = current_proj.basedir
    base_variant_dir = current_proj.base_variant_dir
else:
    # current_project - V6 Project object 
    Import('current_project')
    current_proj = current_project

    current_project.name     = 'ciotry'
    current_project.linkopt  = '--code-loc 0x5A80 --data-loc 0'
    current_project.stack    = '0xffff'
    #current_project.heapsize = '1024'     # uncomment this line, if you realy need a heap

    # In this project we need only sdcc environment  (to compile C source files)
    env = current_project.env
    platformSourceFile = ['platform/platform_v6z80p.ci']
    basedir = current_project.basedir
    base_variant_dir = current_project.base_variant_dir


proj_dir  = basedir + 'src/ciotry'
build_dir = base_variant_dir + 'ciotry'


all_ci_files = Glob(proj_dir + '/*.ci') + \
               Glob(proj_dir + '/' +  platformSourceFile[0])



# Some times (then error occured), the expander.py is produced a target file with a 0 length. So perform check and delete founded files (with zero length).
for o in Glob('_*.ci'):
    if hasattr(o, "get_size") and callable(o.get_size):        
        if o.get_size() == 0:        
            os.remove( o.get_abspath() )


# 1. call macro processor for every .ci file in the project.
opt = '-I ' + proj_dir
all_ci_files_processed = []
for src in all_ci_files:
    res = env.Command('_${SOURCE.name}', src, 'expander.py ' + opt + ' $SOURCE > $TARGET')        
    Project_Helper.SetProgressMessageForNode(res[0], '------------- Macro process CIO files ---------')
    all_ci_files_processed.append( res )
Depends(all_ci_files_processed, 'fixed.inc')



#exit()


# 2. Generate .c file , from all *.ci files (and apply valen patch on the generated C souce file)
game_c = env.Command('game.c', all_ci_files_processed, "cito -l c -o $TARGET  $SOURCES"
        + " && " + current_proj.basedir + "src/ciotry/change_text.php $TARGET"
)
Project_Helper.SetProgressMessageForNode(game_c[0], '------------- Generate C file  from CIO files ---------')


game1_c = env.Command('game1.c', game_c, ReplaceMallocFunc_In_C_File)

# add header text to the begining of game1.c
env_textfile  = Environment(tools = ['default', 'textfile'])
game_c_final = env_textfile.Substfile('game.final.c', [ 'game.header.c', game1_c, 'game.footer.c' ])


if Project_Helper.Is_Target_PC():    
    objs = env.Object( [game_c_final, 'host.c'],
                    CPPPATH     = env['CPPPATH']           + ['/usr/include']
                                        
                    )
else:
    env_sdasz80 = current_project.env_sdasz80
    obj_heap = env_sdasz80.Object('heap.s')

    # compile user .c files to object files
    objs = env.Object(   [game_c_final, 'host.c'],                     
                    CCFLAGS     = env['CCFLAGS']           + ['--std-sdcc99', '--opt-code-speed', '--max-allocs-per-node 3000'],  
                    CPPDEFINES  = env['CPPDEFINES']        + [{'OWN_SP' : current_project.stack}]
                    )

    objs = objs + obj_heap

# here, for some reason, the scons cant make auto depend 
# so, we need to set depend manualy
env.Depends(objs, game_c)


if Project_Helper.Is_Target_PC():
    final_exe = env.Program(target='ciotry', source=objs, LIBS = proj_libs )
else:
    # link to .ihx and convert .ihx to .exe
    final_exe = current_project.FLOS_Program(objs)
    current_project.Upload(final_exe)




# propagate PATH to external commands env
# (thus, program 'cito' will be finded in a PATH dirs)
#env['ENV']['PATH'] = os.environ['PATH']
