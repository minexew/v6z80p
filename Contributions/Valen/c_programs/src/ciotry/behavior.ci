$include("fixed.inc")

public class Behavior
{
    int foo;    // at least one var must be here (for correct code generation for C)
    // Engine engine;

    // public void Init(Engine e)
    // {
    //     engine = e;
    // }
    
    public virtual void DoBehavior(GameObj game_obj)
    {
        // implementation        
        //Debug.Print("Behavior.()\n");            
    }

}


public class MovingBehavior : Behavior
{    
    $FIXED xvel;
    $FIXED yvel;
    
    /// Constructor
    MovingBehavior()
    {        
        xvel = yvel = 0; 
    }
    
    // workaround 
    public void Virtual_MovingBehavior_DoBehavior(GameObj game_obj)
    {
        game_obj.x += xvel;
        game_obj.y += yvel;        
    }

    public override void DoBehavior(GameObj game_obj)
    {
        //Debug.Print("MovingBehavior.()\n");
        Virtual_MovingBehavior_DoBehavior(game_obj);
    }

}

public class BouncedBehavior : MovingBehavior
{    
    int x1_bounce;
    int y1_bounce;
    
    int x2_bounce;
    int y2_bounce;
    
    /// Constructor
    BouncedBehavior()
    {        
        x1_bounce = y1_bounce = x2_bounce = y2_bounce = 0;
    }
    
    public override void DoBehavior(GameObj game_obj)
    {
        //Debug.Print("BouncedBehavior.()\n");
        // call base class func 
        Virtual_MovingBehavior_DoBehavior(game_obj);
        
        if( (game_obj.x >> $FIXED_BITS) < x1_bounce || (game_obj.x >> $FIXED_BITS) > x2_bounce )
            xvel = -xvel;
        
    }

}



public class KeysControlledBehavior : MovingBehavior
{    

    int foo;

    KeysControlledBehavior()
    {        

    }
    
    public override void DoBehavior(GameObj game_obj)
    {
        //Debug.Print("BouncedBehavior.()\n");
        // call base class func 
        Virtual_MovingBehavior_DoBehavior(game_obj);
        
        yvel = 0;
        if(game_obj.engine.myPlatformInput.IsKeyPressed(KeybSym.kb_up))   yvel = $FLOAT_TO_FIXED(-1);
        if(game_obj.engine.myPlatformInput.IsKeyPressed(KeybSym.kb_down)) yvel = $FLOAT_TO_FIXED( 1);


        xvel = 0;
        if(game_obj.engine.myPlatformInput.IsKeyPressed(KeybSym.kb_left))  xvel = $FLOAT_TO_FIXED(-1);
        if(game_obj.engine.myPlatformInput.IsKeyPressed(KeybSym.kb_right)) xvel = $FLOAT_TO_FIXED( 1);

        if(game_obj.engine.myPlatformInput.IsKeyPressed(KeybSym.kb_space)) {
            GameObj obj = game_obj.engine.AllocateGameObj();            
            if(obj == null)
                Debug.Print("ERR: cant alloc gameobj - Bullet \n");
            else {
                // re-init obj and add  behavior
                obj.Constructor();
                obj.Init(game_obj.engine);
                obj.sprite.LoadFromImageFile("free_sprites.bmp");
                obj.sprite.SetSrcImageRect(0,37, 24,12);
                MovingBehavior moving_behavior = new MovingBehavior();
                moving_behavior.xvel = $FLOAT_TO_FIXED(1);
                obj.AddBehavior(moving_behavior);

                BulletBehavior beh = new BulletBehavior();                
                obj.AddBehavior(beh);

                obj.x = game_obj.x;
                obj.y = game_obj.y;
            }
        
        }

        native {
            // DEBUG_PRINT("Obj x =  %i, y =  %i \n", game_obj->x, game_obj->y);
        }
        
    }
}


public class BulletBehavior : Behavior
{    

    int foo;

    BulletBehavior()
    {        

    }
    
    public override void DoBehavior(GameObj game_obj)
    {
        // Debug.Print("BulletBehavior.DoBehavior()\n");
        int x = game_obj.x >> $FIXED_BITS;
        if(x < -32 || x > 320)
            game_obj.Unused();
    }
}

